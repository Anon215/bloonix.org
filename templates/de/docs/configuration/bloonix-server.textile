h1. Konfiguration des Bloonix-Servers

p. Die Konfiguration des Servers befindet sich in:

bc. /etc/bloonix/server/main.conf

h2. Globale Parameter

bc. user bloonix
group bloonix
timezone Europe/Berlin
hostname yourhostname
allow_from 127.0.0.1
elasticsearch_roll_forward /var/log/bloonix/elasticsearch-roll-forward.json

|_. Parameter |_. Standard |_. Beschreibung |
| user | bloonix | Mit welchem Benutzer soll der Daemon laufen. |
| group | bloonix | Mit welcher Gruppe soll der Daemon laufen. |
| timezone | Europe/Berlin | Die Zeitzone des Servers. |
| hostname | wird ermittelt | Der Hostname, auf dem der Server läuft. Der Hostname wird automatisch ermittelt, wenn er nicht angegeben ist. |
| allow_from | ^127\.0\.0\.1\z | Dieser Parameter ist vergleichbar mit einer Whitelist. Es können alle vertrauenswürdigen IP-Adressen eingetragen werden, auf denen ein Bloonix-Agent läuft. Den Parameter gibt es auch in der Weboberfläche von Bloonix bei der Einrichtung eines Hosts. Dort können ebenfalls IP-Adressen eingetragen werden, denen es erlaubt ist, Daten für einen Host abzufragen bzw. Daten abzuliefern. |
| elasticsearch_roll_forward | /var/log/bloonix/elasticsearch-roll-forward.json | Siehe unten. |

h3. Roll-Forward-Log

p. Jedesmal, wenn Elasticsearch nicht erreichbar ist oder ein Fehler auftritt, werden Inserts und Updates in eine Datei geschrieben. Wenn zum Beispiel Elasticsearch nach einem Update einen Cluster-Restart erfordert, landen alle Aktionen in der Datei. Diese Einträge können später importiert werden. Das Kommando hierzu lautet:

bc. bloonix-roll-forward-log

p. Das Skript läd automatisch die Serverkonfiguration und importiert vorhandene Einträge im Logfile nach Elasticsearch. Das Skript geht dabei wie folgt vor:

* Logfile umbenennen nach __elasticsearch-roll-forward.json.import__.
* Eine Datei namens __elasticsearch-roll-forward.json.import.count__ anlegen, um den Verarbeitungsstatus zu speichern.
* Das Logfile __elasticsearch-roll-forward.json.import__ wird importiert.
* Bei Verbindungsfehlern werden die Datensätze in __elasticsearch-roll-forward.json__ geschrieben.
* Nach dem Durchlauf werden die temporären Dateien __elasticsearch-roll-forward.json.import__ und __elasticsearch-roll-forward.json.import.count__ entfernt.

p. Ist das Skript einmal gestartet, sollte es auf keinen Fall gestoppt werden. Das Skript merkt sich zwar, bis zu welcher Zeile die Daten verarbeitet wurden, trotzallem kann zu einem Verlust oder zu doppelten Einträgen kommen, wenn der Verarbeitungsprozess seinen Status nicht erfolgreich auf die Platte schreiben konnte.

==
% $stash->{item_name} = "der Bloonix-Server";
% $stash->{item_type} = "server";
==

<% include /de/docs/configuration/template-proc-manager.textile %>

h2. Sektion: tcp_server

p. In dieser Sektion werden die Parameter für den FastCGI Server konfiguriert. Die Konfiguration ist sehr einfach.

bc. tcp_server {
    port 5460
    use_ssl yes
    ssl_key_file /etc/bloonix/server/pki/server.key
    ssl_cert_file /etc/bloonix/server/pki/server.cert
}

<% include /de/docs/configuration/template-tcp-server-server.textile %><% include /de/docs/configuration/template-tcp-server-basic.textile %>

h2. Sektion: notifications

p. In der Sektion __notifications__ werden die Subsektionen zur Konfiguration von E-Mail und SMS Benachrichtigungen konfiguriert.

bc.. notifications {
    sms {
        command /usr/bin/curl -s https://sms.test?key=SECRET&from=BLOONIX&to=%TO%&message=%MESSAGE%
        response ^100$
    }
    mail {
        from subdomain@yourdomain.test
        bcc admin@yourdomain.test
        subject *** STATUS %s FOR %h (%a) ***
    }
}

h3. Subsektion: sms

|_. Parameter |_. Standard |_. Beschreibung |
| command | | Das Kommando, um eine SMS zu versenden. Die Platzhalter %TO% und %MESSAGE% werden URL-encoded mit der Mobilfunknummer und der Warnmeldung ersetzt. |
| response | | Die erwartete Antwort, wenn die SMS erfolgreich übersendet werden konnte. Der Wert ist ein regulärer Ausdruck. |
| failover_command | | Mit __failover_command__ lässt sich ein weiteres Kommando einrichten, welches aufgerufen wird, wenn das erste Kommando fehlgeschlagen ist. Dies ist sinnvoll, wenn zum Beispiel der Anbieter zur Versendung der SMS nicht verfügbar ist. |
| failover_response | | Die erwartete Antwort von __failover_command__. |

h3. Subsektion: mail

p. Diese Sektion wird für das Versenden von E-Mails an Kontakte konfiguriert.

|_. Parameter |_. Standard |_. Beschreibung |
| sendmail | /usr/sbin/sendmail -t -oi -oem | Kommando zum Versenden von E-Mails. |
| from | bloonix@localhost | Die Adresse des Absenders. |
| bcc |  | Mit diesem Parameter ist es möglich, E-Mails an Kontakte als Blindkopie zu erhalten. Zusätzlich erhält der Empfänger eine Kopie jeder SMS, die versendet wurde. |
| subject | ==*** STATUS %s FOR %h (%a) ***== | Hier wird der Betreff konfiguriert. Die Strings __%s__ (Status), __%h__ (Hostname) und __%a__ (IP-Adresse) werden ersetzt. |

h2. Sektion: redirect_remote_agent_timeouts

p. Die Sektion __redirect_remote_agent_timeouts__ bietet ein ganz spezielles Feature an, welches nur verwendet werden sollte, wenn Sie Kundenserver über Bloonix überwachen und wenn die Kunden als Kontakt für Benachrichtigungen eingerichtet sind.

p. Stellen Sie sich folgendes Szenario vor:

p. Sie bieten Ihren Kunden Monitoring über Bloonix an und haben hierfür einen Agenten eingerichtet, der zum Beispiel per Remote-Check die Webseiten Ihrer Kunden überwacht. Wenn dieser Agent ausfallen würde, dann würden Ihre Kunden nach Ablauf eines Timeouts eine kritische Meldung per E-Mail oder SMS erhalten, da der Service seit mehreren Minuten nicht mehr geprüft wurde. Was hier beachtet werden muss ist, dass weder der Webserver des Kunden ausgefallen ist, noch ein Agent, der auf einem Kundenserver läuft. Der Kunde würde also über einen kritischen Zustand informiert, den der Kunde nicht zu verantworten hat, da in diesem Fall der Agent ausgefallen ist, der auf Ihrem Server und in Ihrem Zuständigkeitsbereich läuft, um die Webseiten Ihrer Kunden zu überwachen.

p. Um nun zu vermeiden, dass Kunden in diesem Fall fälschlicherweise benachrichtigt werden, gibt es den Parameter __mail_to__ in der Sektion __redirect_remote_agent_timeouts__. Der Kunde selbst würde keine SMS und auch keine E-Mail mehr für Services erhalten, die mit der Option __Standort des Agenten: remote__ konfiguriert sind, stattdessen würden die Benachrichtigungen per E-Mail an die Adresse umgeleitet, die mit dem Parameter __mail_to__ gesetzt ist.

p. Die Konfiguration der Sektion ist sehr einfach:

bc. redirect_remote_agent_timeouts {
    mail_to foo@example.test
}

|_. Parameter |_. Standard |_. Beschreibung |
| mail_to |  | Die E-Mail-Adresse, zu der Nachrichten umgeleitet werden sollen. |

p. Möchten Sie diese Funktion nicht einsetzen, so können Sie die Sektion auskommentieren.

==
% $stash->{item_logfile} = "bloonix-server-database.log";
% $stash->{item_filename} = "bloonix-server.log";
==

<% include /de/docs/configuration/template-database.textile %>

<% include /de/docs/configuration/template-elasticsearch.textile %>

<% include /de/docs/configuration/template-logger.textile %>
