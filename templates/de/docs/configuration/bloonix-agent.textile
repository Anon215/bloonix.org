h1. Konfiguration des Bloonix-Agenten

p. Die Konfiguration des Agenten befindet sich in:

bc. /etc/bloonix/agent/main.conf

h2. Globale Parameter

bc. agents 4
user bloonix
group bloonix
plugins /usr/lib/bloonix/plugins
simple_plugins /usr/local/lib/bloonix/simple-plugins,/usr/lib/bloonix/simple-plugins
include /etc/bloonix/agent/conf.d

|_. Parameter |_. Standard |_. Beschreibung |
| agents | 1 | Wieviele Agenten sollen geforkt werden, um die konfigurierten Hosts zu überwachen. |
| max_concurrent_checks | 4 | Mit diesem Parameter wird festgelegt, wieviele Checks maximal gleichzeitig für einen Host ausgeführt werden sollen. Der Parameter ist abhängig von der Einstellung des Parameters __agents__. Wenn der Parameter __agents__ auf 1 gesetzt ist, kann auch immer nur ein Check gleichzeitig ausgeführt werden. |
| max_concurrent_hosts | auto | Jeder konfigurierte Host wird in regelmäßigen Abständen gepollt (siehe __poll_interval__), um zu prüfen, ob Services geprüft werden müssen. Hierzu werden die Hosts in eine Queue gelegt, die von den Agenten abgearbeitet wird. Mit diesem Parameter wird festgelegt, wieviele Hosts maximal gleichzeitig von den Agenten verarbeitet werden. |
| poll_interval | 60 | Der Bloonix-Agent pollt für jeden konfigurierten Host den Bloonix-Server standardmäßig alle 60 Sekunden um eine Liste der Services zu erhalten, die er prüfen soll. Dieser Parameter sollte nur dann kleiner gesetzt werden, wenn der Intervall eines Hosts oder von Services kleiner 60 Sekunden ist. |
| agent_active_when |  | Hier kann ein Shell Kommando hinterlegt werden. Der gesamte Agent ist erst aktiv, wenn dieses Kommando erfolgreich ausgeführt werden konnte (exit 0). |
| user, group | bloonix | Mit diesen Parametern wird bestimmt, mit welchem Benutzer und welcher Gruppe der Agent läuft und die Checks ausführt. |
| plugins | /usr/local/lib/bloonix/plugins | Mit dem Parameter __plugins__ wird der Pfad angegben, unter dem die Plugins zur Ausführung liegen. Sollte der Bloonix-Agent über einen Paketmanager installiert werden, so kann der Pfad abweichen. Auf Debian werden die Plugins beispielsweise unter /usr/lib/bloonix/plugins installiert. Unter Windows liegen die Plugins höchstwahrscheinlich im Installationsverzeichnis des Agenten. |
| plugin_libdir | /var/lib/bloonix/agent | Unter diesem Pfad legen diverse Plugins Daten ab, um Deltas von statistischen Daten berechnen zu können. |
| config_path | /etc/bloonix/agent | Unter diesem Pfad können Plugin-spezifische Konfigurationsdateien abgelegt werden. |
| simple_plugins |  | Falls Sie Nagios-kompatible Plugins einsetzen möchten, so können Sie hier den Pfad zu den installierten Plugins setzen. Eine komma-separierte Liste von Pfaden ist möglich. |
| include |  | Mit dem Parameter __include__ lassen sich andere Konfigurationsdateien oder sogar Verzeichnisse einbinden. Falls das Ziel ein Verzeichnis ist, so werden alle Dateien darin inkludiert, die mit __.conf__ enden. |
| use_sudo |  | Welche Checks sollen mit __sudo__ ausgeführt werden. Hier werden nur die Checks Skripte angegeben, ohne Pfade. Es ist möglich mehrere Skripte komma-separiert anzugeben. |

h2. Detailierte Beschreibung einzelner Parameter

h3. Parameter agents und max_concurrent_checks

p. Der Bloonix-Agent verwendet fork(), um bei Programmstart die angegebene Anzahl an Agenten, die mit dem Parameter __agents__ angegeben ist, zu forken. Der Parent-Prozess fungiert als Scheduler und verteilt die Arbeit auf die Child-Prozesse. Mit dem Parameter __max_concurrent_checks__ wird bestimmt, wieviele Service-Checks parallel pro Host ausgeführt werden. Es wird empfohlen, den Parameter __agents__ und __max_concurrent_checks__ auf mindestens 4 einzustellen.

p. Der Parameter __max_concurrent_checks__ sollte nie größer sein als der Parameter __agents__, da nur soviele konkurrierende Checks ausgeführt werden können, wie es Agenten gibt.

h3. Parameter max_concurrent_hosts

p. Der Parameter __max_concurrent_hosts__ funktioniert ähnlich dem Parameter __max_concurrent_checks__. Die Hosts, die in der Konfigurationsdatei des Agenten zur Überwachung eingetragen sind, werden in regelmäßigen Abständen gepollt, um zu prüfen, ob Services zur Überwachung anstehen. Hierzu sendet der Bloonix-Agent eine Anfrage zum Bloonix-Server. Wenn Services zur Überwachung anstehen, dann werden die Services geprüft. Die maximale Anzahl an Hosts, die gleichzeitig geprüft werden, kann mit dem Parameter __max_concurrent_hosts__ reguliert werden. Standardmäßig steht der Parameter auf dem Wert __auto__ (oder auch 0) und wird auf 50% der Anzahl des Parameters __agents__ gesetzt.

h3. Parameter max_concurrent_hosts + max_concurrent_checks

p. Mit den Parametern __max_concurrent_hosts__ und __max_concurrent_checks__ kann die Aufteilung der Ausführung von Checks optimiert werden und sollte immer mit Bezug auf den Parameter __agents__ konfiguriert sein. Nehmen wir einmal an, Sie haben die Parameter wie folgt gesetzt:

bc. # nicht optimierte Konfiguration:
agents 50
max_concurrent_hosts 50
max_concurrent_checks 50

p. In diesem Beispiel gibt es 50 Prozesse, die die Queue zur Abarbeitung von Hosts und Service-Checks abarbeiten. Das Problem dabei ist, dass die Prozesse je nach Anzahl der Service-Checks eines Hosts allesamt geblockt werden können. Wenn Sie zum Beispiel einen einzelnen Host in der WebGUI mit 50 HTTP-Checks konfiguriert haben, dann würden diese 50 Checks auf alle Agenten aufgeteilt. Hat der Host in einem Moment Lastprobleme und benötigt für die HTTP-Checks eine längere Abarbeitungszeit, so würden alle 50 Agenten geblockt, bis die Checks ausgeführt sind. Um das zu vermeiden, können die maximalen Checks, die gleichzeitig von einem Host geprüft werden, limitiert werden.

p. Beide Parameter in Kombination können also dazu führen, dann Hosts und Service-Checks optimiert verteilt werden:

bc. # optimierte Konfiguration:
agents 50
max_concurrent_hosts 20
max_concurrent_checks 5

p. In diesem Beispiel können maximal 20 Hosts gleichzeitig mit je 5 Service-Checks bearbeitet werden. Somit würde ein Host, der 50 HTTP-Checks eingerichtet hat, nur 5 Agenten-Prozesse belegen.

h3. Umgebungsvariablen

p. Der Bloonix-Agent setzt beim Start und vor jeder Ausführung eines Checks diverse Umgebungsvariablen, die wiederrum von den Plugins selbst verwendet werden können, um spezifische Informationen zum Host, zum Service oder zur Umgebung zu erlangen. Es werden folgende Variablen standardmäßig gesetzt:

bc. PLUGIN_LIBDIR
CONFIG_PATH
CHECK_HOST_ID
CHECK_SERVICE_ID

p. Die Variablen __PLUGIN_LIBDIR__ und __CONFIG_PATH__ werden zum Start des Agenten einmal gesetzt. Die Konfigurationsparameter hierzu lauten __plugin_libdir__ und __config_path__. Die Variablen __CHECK_HOST_ID_ und __CHECK_SERVICE_ID__ werden immer vor jedem Check immer auf die Host-ID und die Service-ID gesetzt, für die der Check gerade ausgeführt wird. Die Checks von Bloonix verwenden diese Umgebungsvariablen für interne Zwecke.

h3. Parameter: use_sudo

p. Da der Bloonix-Agent nicht mit root-Rechten läuft, für manche Service-Checks jedoch root-Rechte benötigt werden, kann hier definiert werden, welche Service-Checks mit __sudo__ ausgeführt werden sollen.

p. Die notwendigen Parameter und Dateien zur Funktionalität von __sudo__ sollten nach der Installtion der Pakete, die Checks enthalten, welche via __sudo__ ausgeführt werden müssen, bereits angelegt sein. Wenn Sie zum Beispiel das Paket __bloonix-plugins-sensors__ installieren, dann werden die Dateien __/etc/bloonix/agent/conf.d/check-lm-sensors.conf__ und __/etc/sudoers.d/60_bloonix_check_lm_sensors__ angelegt, die folgenden Inhalt haben:

bc.. cat /etc/bloonix/agent/conf.d/check-lm-sensors.conf
use_sudo check-lm-sensors

bc.. cat /etc/sudoers.d/60_bloonix_check_lm_sensors
bloonix ALL=(ALL) NOPASSWD:/usr/lib/bloonix/plugins/check-lm-sensors

p. Falls Sie Nagios-Plugins einsetzen und diese via __sudo__ ausgeführt werden müssen, dann muss der Nagios-Check in __/etc/sudoers__ eingetragen werden und in der Konfigurationsdatei des Agenten mit dem Parameter __use_sudo__.

h2. Sektion: server

bc.. server {
    host p1.bloonix.de, s1.bloonix.de
    port 5460
    mode failover
    use_ssl yes
    ssl_verify_mode peer

    # Debian / SuSE / SLES
    ssl_ca_path /etc/ssl/certs

    # Red Hat / CentOS / Fedora
    ssl_ca_file /etc/pki/tls/certs/ca-bundle.crt
}

h3. Parameter

<% include /de/docs/configuration/template-tcp-server-client.textile %><% include /de/docs/configuration/template-tcp-server-basic.textile %>

<% include /de/docs/configuration/template-logger.textile %>

h2. Sektion: env

p. Hier können globale Umgebungsvariablen gesetzt werden.

bc. env {
    NAME value
}

h2. Sektion: host

bc. host {
    host_id 12345
    password secret
}

|_. Parameter |_. Standard |_. Beschreibung |
| host_id |  | Die ID des Hosts, welcher überwacht werden soll. Die ID ist im Webinterface in der Konfiguration des Hosts zu finden. |
| password |  | Das Passwort des Hosts, welcher überwacht werden soll. Das Passwort ist im Webinterface in der Konfiguration des Hosts zu finden. |
| agent_id | localhost | Jeder Service ist mit einer Agenten-ID gekennzeichnet. Mit dieser Option kann ausgewählt werden, welche Services eines Hosts von diesem Agenten aus überwacht werden. Mögliche Werte sind __localhost__, __intranet__ und __remote__. |
| active | yes | Mit diesem Parameter kann die Überwachung des Hosts aktiviert oder deaktiviert werden. |
| env |  | Umgebungsvariablen für die Checks dieses Hosts. |
| execute_on_event |  | Ausführung eines Skripts bei einem bestimmten Status. |
| when |  | Der Host wird nur überwacht, wenn das Kommando True zurückgibt. |

h3. Parameter: env

p. Mit diesem Parameter können Umgebungsvariablen der Checks eines Hosts geändert werden.

bc. host {
    host_id 12345
    password secret
    env {
        PATH /usr/local/bin
    }
}

h3. Parameter: execute_on_event

p. Manchmal kann es hilfreich sein, wenn man auf dem Server, der überwacht wird, bei bestimmten Ereignissen ein Skript ausführen kann. Nehmen Sie zum Beispiel an, dass Sie ein selbstgeschriebenes Skript ausführen möchten, sobald der Status für einen Service __CRITICAL__ oder __UNKNOWN__ ist. Die Einrichtung sieht beispielhaft wie folgt aus:

bc. host {
    host_id 12345
    password secret
    execute_on_event {
        $service_id { # "$service_id" bitte mit der Service-ID ersetzen
            status CRITICAL, UNKNOWN
            command /usr/local/bin/my-script %I %C %S
        }
    }
}

p. In der Untersektion __execute_on_event__ wird zunächst das Kommando oder die Service-ID angegeben. Im Weiteren muss angegeben werden, für welchen Status das Skript, welches unter __command__ angegben wird, ausgeführt werden soll. Die Platzhalter __%I__, __%C__ und __%S__ werden wie folgt ersetzt:

| %I | Service-ID |
| %C | Das Kommando, was ausgeührt wurde. Beispiel: check-http |
| %S | Status des Checks |

h3. Parameter: when

p. Mit dem Parameter __when__ ist es möglich, ein Shell-Kommando auszuführen. Wenn der Exitstatus des Kommandos 0 ist, dann wird der Host überwacht. Beispiel:

bc. host {
    host_id 12345
    password secret
    when test -e /tmp/active.test
}

p. In diesem Fall würde der Host mit der ID 12345 nur von dem Agenten geprüft werden, wenn die Datei __/tmp/active.test__ existiert.
