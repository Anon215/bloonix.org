h1. Konfiguration des Bloonix-Agenten

p. Die Konfiguration des Agenten befindet sich in:

bc. /etc/bloonix/agent/main.conf

h2. Globale Parameter

bc. agents 1
user bloonix
group bloonix
plugins /usr/lib/bloonix/plugins
simple_plugins /usr/local/lib/bloonix/simple-plugins,/usr/lib/bloonix/simple-plugins
include /etc/bloonix/agent/conf.d

|_. Parameter |_. Standard |_. Beschreibung |
| agents | 1 | Wieviele Agenten sollen geforkt werden, um die konfigurierten Hosts zu überwachen. |
| max_concurrent_checks | 4 | Mit diesem Parameter wird festgelegt, wieviele Checks maximal gleichzeitig für einen Host ausgeführt werden sollen. Der Parameter ist abhängig von der Einstellung des Parameters __agents__. Wenn der Parameter __agents__ auf 1 gesetzt ist, kann auch immer nur ein Check gleichzeitig ausgeführt werden. |
| poll_interval | 60 | Der Bloonix-Agent pollt für jeden konfigurierten Host den Bloonix-Server standardmäßig alle 60 Sekunden um eine Liste der Services zu erhalten, die er prüfen soll. Dieser Parameter sollte nur dann kleiner gesetzt werden, wenn der Intervall eines Hosts oder von Services kleiner 60 Sekunden ist. |
| user, group | bloonix | Mit diesen Parametern wird bestimmt, mit welchem Benutzer und welcher Gruppe der Agent läuft und die Checks ausführt. |
| plugins | /usr/local/lib/bloonix/plugins | Mit dem Parameter __plugins__ wird der Pfad angegben, unter dem die Plugins zur Ausführung liegen. Sollte der Bloonix-Agent über einen Paketmanager installiert werden, so kann der Pfad abweichen. Auf Debian werden die Plugins beispielsweise unter /usr/lib/bloonix/plugins installiert. Unter Windows liegen die Plugins höchstwahrscheinlich im Installationsverzeichnis des Agenten. |
| plugin_libdir | /var/lib/bloonix/agent | Unter diesem Pfad legen diverse Plugins Daten ab, um Deltas von statistischen Daten berechnen zu können. |
| config_path | /etc/bloonix/agent | Unter diesem Pfad können Plugin-spezifische Konfigurationsdateien abgelegt werden. |
| simple_plugins |  | Falls Sie Nagios-kompatible Plugins einsetzen möchten, so können Sie hier den Pfad zu den installierten Plugins setzen. Eine komma-separierte Liste von Pfaden ist möglich. |
| include |  | Mit dem Parameter __include__ lassen sich andere Konfigurationsdateien oder sogar Verzeichnisse einbinden. Falls das Ziel ein Verzeichnis ist, so werden alle Dateien darin inkludiert, die mit __.conf__ enden. |
| use_sudo |  | Welche Checks sollen mit sudo ausgeführt werden. Hier werden nur die Checks Skripte angegeben, ohne Pfade. Es ist möglich mehrere Skripte komma-separiert anzugeben. |

h3. Parameter agents

p. Dieser Parameter bestimmt, wieviele Agenten mittels fork() gestartet werden sollen, um die Daten zu sammeln. Da der Agent meistens installiert wird, um den lokalen Server zu überwachen, reicht es diesen Parameter auf 1 zu setzen. Diesen Wert höher als 1 zu setzen, lohnt sich erst, wenn der Agent mehr als einen Host überwacht.

p. Ein Agent führt immer alle konfigurierten Checks eines Host aus und sendet die Daten gebündelt zum Bloonix-Server. Wieviele Agenten schlussendlich konfiguriert werden, kommt immer darauf an, wieviele Hosts und wieviele Checks in der Summe konfiguriert sind. Ein weiterer Faktor ist auch, wie lange ein Agent benötigt um alle Checks eines Hosts auszuführen.

p. Wenn Sie zum Beispiel 10 Hosts mit je 10 Services konfiguriert haben, so sollten 3 Agenten vollkommen ausreichen, diese 10 Hosts zu prüfen.

h3. Umgebungsvariablen

p. Der Bloonix-Agent setzt beim Start und vor jeder Ausführung eines Checks diverse Umgebungsvariablen, die wiederrum von den Plugins selbst verwendet werden können, um spezifische Informationen zum Host, zum Service oder zur Umgebung zu erlangen. Es werden folgende Variablen standardmäßig gesetzt:

bc. PLUGIN_LIBDIR
CONFIG_PATH
CHECK_HOST_ID
CHECK_SERVICE_ID

p. Die Variablen __PLUGIN_LIBDIR__ und __CONFIG_PATH__ werden zum Start des Agenten einmal gesetzt. Die Konfigurationsparameter hierzu lauten __plugin_libdir__ und __config_path__. Die Variablen __CHECK_HOST_ID_ und __CHECK_SERVICE_ID__ werden immer vor jedem Check immer auf die Host-ID und die Service-ID gesetzt, für die der Check gerade ausgeführt wird. Die Checks von Bloonix verwenden diese Umgebungsvariablen für interne Zwecke.

h3. Parameter: use_sudo

p. Da der Bloonix-Agent nicht mit root-Rechten läuft, für manche Service-Checks jedoch root-Rechte benötigt werden, kann hier definiert werden, welche Service-Checks mit sudo ausgeführt werden sollen.

p. Die notwendigen Parameter für __use_sudo__ sollten nach der Installtion der Pakete, die Checks enthalten, welche via __sudo__ ausgeführt werden müssen, bereits angelegt sein. Wenn Sie zum Beispiel das Paket __bloonix-plugins-sensors__ installieren, wird eine Datei namens __/etc/bloonix/agent/conf.d/check-lm-sensors.conf__ angelegt, die folgenden Inhalt hat:

bc.. cat /etc/bloonix/agent/conf.d/check-lm-sensors.conf
use_sudo check-lm-sensors

p. Bitte beachten Sie, dass auch die __sudo__ Anweisungen bereits im Verzeichnis __/etc/bloonix/agent/sudoers.d__ konfiguriert sind. Wenn Sie also Checks verwenden möchten, die via __sudo__ ausgeführt werden müssen, so inkludieren Sie bitte das Verzeichnis in der Datei __/etc/sudoers__.

bc.. visudo
#includedir /etc/bloonix/agent/sudoers.d

p. Falls Sie Nagios-Plugins einsetzen und dieses via __sudo__ ausgeführt werden müssen, dann muss der Nagios-Check in __/etc/sudoers__ eingetragen werden und in der Konfigurationsdatei des Agenten mit dem Parameter __use_sudo__.

h2. Sektion: server

bc.. server {
    host p1.bloonix.de, s1.bloonix.de
    port 5460
    mode failover
    use_ssl yes
    ssl_verify_mode peer

    # Debian / SuSE / SLES
    ssl_ca_path /etc/ssl/certs

    # Red Hat / CentOS / Fedora
    ssl_ca_file /etc/pki/tls/certs/ca-bundle.crt
}

h3. Parameter

<% include /de/docs/configuration/template-tcp-server-client.textile %><% include /de/docs/configuration/template-tcp-server-basic.textile %>

<% include /de/docs/configuration/template-logger.textile %>

h2. Sektion: env

p. Hier können globale Umgebungsvariablen gesetzt werden.

bc. env {
    NAME value
}

h2. Sektion: host

bc. host {
    host_id 12345
    password secret
}

|_. Parameter |_. Standard |_. Beschreibung |
| host_id |  | Die ID des Hosts, welcher überwacht werden soll. Die ID ist im Webinterface in der Konfiguration des Hosts zu finden. |
| password |  | Das Passwort des Hosts, welcher überwacht werden soll. Das Passwort ist im Webinterface in der Konfiguration des Hosts zu finden. |
| agent_id | localhost | Jeder Service ist mit einer Agenten-ID gekennzeichnet. Mit dieser Option kann ausgewählt werden, welche Services eines Hosts von diesem Agenten aus überwacht werden. Mögliche Werte sind __localhost__, __intranet__ und __remote__. |
| active | yes | Mit diesem Parameter kann die Überwachung des Hosts aktiviert oder deaktiviert werden. |
| env |  | Umgebungsvariablen für die Checks dieses Hosts. |
| execute_on_event |  | Ausführung eines Skripts bei einem bestimmten Status. |

h3. Parameter: env

p. Mit diesem Parameter können Umgebungsvariablen des Checks geändert werden.

bc. host {
    host_id 12345
    password secret
    env {
        PATH /usr/local/bin
    }
}

h3. Parameter: execute_on_event

p. Manchmal kann es hilfreich sein, wenn man auf dem Server, der überwacht wird, bei bestimmten Ereignissen ein Skript ausführen kann. Nehmen Sie zum Beispiel an, dass Sie ein selbstgeschriebenes Skript ausführen möchten, sobald der Status für einen Service __CRITICAL__ oder __UNKNOWN__ ist. Die Einrichtung sieht beispielhaft wie folgt aus:

bc. host {
    host_id 12345
    password secret
    execute_on_event {
        check-memstat {
            status CRITICAL, UNKNOWN
            command /usr/local/bin/my-script %I %C %S
        }
    }
}

p. In der Untersektion __execute_on_event__ wird zunächst das Kommando oder die Service-ID angegeben. Im Weiteren muss angegeben werden, für welchen Status das Skript, welches unter __command__ angegben wird, ausgeführt werden soll. Die Platzhalter __%I__, __%C__ und __%S__ werden wie folgt ersetzt:

| %I | Service-ID |
| %C | Das Kommando, was ausgeührt wurde. Beispiel: check-http |
| %S | Status des Checks |

