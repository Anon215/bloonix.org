h1. Bloonix Skripte und Cronjobs

h2. Skripte

|_. Skript |_. Installiert durch |_. Kurzbeschreibung |
| bloonix-check-for-maintenance | bloonix-server | Einrichtung einer globalen Downtime. |
| bloonix-count-es-service-documents | bloonix-server | Anzahl der Dokumente eines Hosts in Elasticsearch. |
| bloonix-delete-es-host-data | bloonix-server | Daten eines Hosts löschen. |
| bloonix-get-sms-count | bloonix-server | Anzahl der versendeten SMS einer Company. |
| bloonix-roll-forward-log | bloonix-server | Einspielen von JSON Daten nach Ausfall von Elasticsearch. |
| bloonix-update-agent-host-config | bloonix-server | Automatische Aktualisierung der Hostkonfiguration für den Bloonix-Agenten. |
| bloonix-cli | bloonix-agent | Command-Line-Interface für die WebGUI. |
| bloonix-init-host | bloonix-agent | Einen Host in der Agenten-Konfiguration anlegen. |
| bloonix-create-plugin | bloonix-plugin-config | Erzeugung einer importfähigen Konfigurationsdatei eines Plugins. |
| bloonix-load-plugins | bloonix-plugin-config | Eine Konfigurationdatei eines Plugins in die Datenbank importieren. |

h2. bloonix-check-for-maintenance

p. Mit diesem Skript kann geprüft werden, ob der Monitoring-Server eventuell Netzwerkprobleme hat. Die Prüfung erfolgt über einfache Ping-Checks zu einem externen Server. Der Aufruf des Skripts sieht beispielhaft wie folgt aus:

bc. bloonix-check-for-maintenance -H a.server.example -H b.server.example -H c.server.example -e 600

p. Die angegeben Server werden mittels __check-ping__ geprüft. Wenn die Ping-Checks für alle Server einen höheren Status als WARNING zurückgeben (CRITICAL oder UNKNOWN), so wird das Warnmeldesystem von Bloonix deaktiviert. Wenn nach der Deaktivierung mindestens ein Ping-Check wieder erfolgreich war, so wird das Warnmeldesystem nach einer Wartezeit von 600 Sekunden wieder aktiviert.

p. Hintergrund:

p. Die Überwachung von Hosts und Services geschieht über die Bloonix-Agenten. Wenn ein Bloonix-Agent den Bloonix-Server netzwerktechnisch nicht mehr erreichen kann, so laufen die Services, die von den Agenten überwacht werden, nach wenigen Minuten auf einen Timeout, der dazu führt, dass eine Warnmeldung für die Services generiert wird.

p. Beispiel: Auf einem Server haben Sie den Bloonix-Agenten installiert. Dieser überwacht die Load-Average des Servers. Der Bloonix-Agent kann den Bloonix-Server nicht erreichen, um den aktuellen Status zu liefern. Irgendwann merkt der Bloonix-Server, dass der Status für die Load-Average seit mehreren Minuten nicht mehr aktualisiert wurde und würde nach einem Timeout eine eigene kritische Warnmeldung generieren.

p. Nun, genau betrachtet gibt es jedoch kein Problem mit dem Host oder den Services, für die in diesem Fall eine Warnmeldung generiert würde, denn das Problem liegt nicht am Host, der überwacht wird, sondern beim Monitoring-Server selbst. Diese Warnmeldung könnte somit irreführend sein. Das Skript __bloonix-check-for-maintenance__ würde also einen Eintrag in der Bloonix-Datenbank tätigen, die alle Bloonix-Server dazu veranlasst, Warnmeldungen via SMS oder E-Mail zu unterdrücken.

h2. bloonix-count-es-service-documents

p. Dieses Skript zeigt die Anzahl Dokumente für jeden Service, welche in Elasticsearch gespeichert sind. Je nach Menge hat das Skript eine sehr lange Laufzeit, da es jeden Index befragen muss, wieviel Dokumente zu einer Service-ID gespeichert sind.

h2. bloonix-delete-es-host-data

p. Mit diesem Skript können Daten von Hosts aus Elasticsearch entfernt werden. Die Aufbewahrungsdauer der Daten wird bei der Konfiguration der Hosts in der WebGUI bestimmt. Der Parameter hierzu lautet __Aufbewahrungszeit__.

h2. bloonix-get-sms-count

p. Dieses Skript erstellt gibt die Anzahl versendeter SMS eines __Unternehmens__ aus. Der Aufruf des Skripts ist sehr einfach:

bc. bloonix-get-sms-count 2014-01-01 2014-01-31

p. Die Ausgabeformat hat folgenen Aufbau:

bc. COMPANY-ID ; REAL-COMPANY-ID ; SMS-COUNT

p. Der Unterschied zwischen __COMPANY-ID__ und __REAL-COMPANY-ID__ ist, dass die __COMPANY-ID__ das Auto-Increment Feld der Tabelle __COMAPNY__ ist, während __REAL-COMPANY-ID__ frei vergeben werden kann. Der Wert kann zum Beispiel verwendet werden, um die ID mit einer fremden Kundendatenbank abzugleichen.

h2. bloonix-roll-forward-log

p. Mit diesem Skript können Daten importiert werden, die während eines Ausfalls von Elasticsearch nicht über den Bloonix-Server gespeichert werden konnten.

p. Erläuterung:

p. Der Bloonix-Server speichert Events und Statistiken von Services in Elasticsearch. Wenn das Speichern der Daten nicht erfolgreich war, zum Beispiel weil Elasticsearch nicht erreichbar war, so werden die Daten temporär in der Datei __/var/log/bloonix/elasticsearch-roll-forward.json__ gespeichert. Um diese Daten nun nachträglich zu importieren, kann das Skript __bloonix-roll-forward-log__ gestartet werden. Das Skript sucht automatisch nach der Log-Datei, importiert die Daten und legt danach eine neue Log-Datei an.

p. _Bitte beachten Sie_, dass die Daten, vorallem die Event-Daten, extrem wichtig sind für die Reports und zur Ermittlung der Flap-Detection von Services. Wenn Events in Elasticsearch fehlen, dann führt das dazu, dass die Reports von betroffenen Services verfälscht sind. Um sicherzustellen, dass dies nie der Fall ist, sollten Sie die Größe der Datei __/var/log/bloonix/elasticsearch-roll-forward.json__ über das Plugin __Filestat.Check__ überwachen. Sobald sich Daten darin befinden, sollten diese umgehend importiert werden. Die Log-Datei muss auf allen Server überwacht werden, auf denen der Bloonix-Server aktiv ist.

h2. bloonix-update-agent-host-config

p. Mit diesem Skript können Sie die Host-Konfiguration eines Agenten automatisiert pflegen. Angenommen, Sie möchten einen zentralen Agenten einrichten, der alle Service-Checks mit der Agenten-Lokation __remote__ überwachen soll.

bc. bloonix-update-agent-host-config --addr localhost --agent-id remote --run

p. Das Skript würde also nun alle Service-Checks mit der Lokation __remote__ aus der Datenbank lesen und diese in einer Datei namens __/etc/bloonix/agent/conf.d/hosts.conf__ schreiben und anschließend den Agenten neu laden. Der Parameter __--addr__ sagt aus, dass der Agent lokal liegt. Wenn Sie die Konfiguration eines Agenten aktualisieren möchten, der auf einem andere Server läuft, so können Sie einfach den Hostnamen über __--addr__ angeben.

bc. bloonix-update-agent-host-config --addr agent.bloonix.net --agent-id remote --run

p. Das Skript würde dann versuchen, sich über SSH auf dem Server __agent.bloonix.net__ mit dem Benutzer __root__ zu verbinden um dort die Konfiguration zu aktulisieren und den Agenten neu zu laden.

p. Bitte beachten Sie, dass über den Parameter __--agent-id__ auch mehrere Lokationen komma-separiert angegeben werden können. Beispiel:

bc. bloonix-update-agent-host-config --addr agent.bloonix.net --agent-id intranet,remote --run

h2. bloonix-cli

p. Mit diesem Skript kann vereinfacht mit der WebGUI kommuniziert werden. Der Aufruf des Skripts ist recht einfach:

bc. bloonix-cli https://webgui/hosts -d '{ "limit": 10 }'

p. Auf Wunsch kann man die Session-ID im Home-Verzeichnis des Benutzers speichern, um nicht bei jedem Aufruf den Benutzernamen und das Passwort eingeben zu müssen.

h2. bloonix-init-host

p. Dieses Skript haben Sie eventuell bereits kennengelernt, wenn Sie einen Agenten initial eingerichtet haben. Mit diesem Skript können Sie vereinfacht einen einzelnen Host einer Agenten-Konfiguration hinzufügen.

p. Angenommen, Sie haben einen Host in der WebGUI eingerichtet und möchten den Agenten auf dem zu überwachenden Server nun konfigurieren. Dies können Sie wie folgt machen:

bc. bloonix-init-host  $hostID.$hostPassword  $bloonixServer1,$bloonixServer2

p. Das Skript benötigt die Host-ID, das Host-Passwort und die Adressen der Bloonix-Server. Bitte beachten Sie, dass die Adressen der Bloonix-Server beim zweiten Ausführen nicht erneut mit angegeben werden müssen.

bc. bloonix-init-host 1000.a9f8hawefhvwfhv98sahdfvauish  server1.bloonix.net,server2.bloonix.net

p. Nachdem das Skript ausgeführt wurde, wird eine Konfigurationsdatei names __/etc/bloonix/agent/conf.d/host-1000.conf__ angelegt und der Agent wird neu gestartet, damit dieser sofort mit der Überwachung des Hosts beginnen kann.

h2. bloonix-create-plugin, bloonix-load-plugins

p. Diese Skripts sind für Entwickler interessant, die eigene Plugins für Bloonix entwickeln möchten. Bitte lesen Sie hierzu das Dokument "HowTo: Plugins entwickeln":/de/docs/howtos/howto-write-plugins.html .

