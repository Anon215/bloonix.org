h1. Coding mit Stil

h2. Programmierstil

h3. Grundlegendes

* Es sollte immer die englische Sprache verwendet werden, sei es für Variablennamen, Erklärungen, Meldungen fürs Logfile oder auch der Ausgabe von Plugins.
* Verwende keine Hard-Tabs, sondern immer Soft-Tabs mit einer Länge von 4 Leerzeichen.
* Für die Einrückung sollten immer 4 Leerzeichen (1 Soft-Tab) verwendet werden.
* Halte den Codingstyle der Programmiersprache bei, welche verwendet wird, jedoch unter Beachtung der oberen Punkte.

h3. Perl

p. Sollte die Programmiersprache Perl verwendet werden, so finden Sie hier einen Codingstyle: "Perlstyle":http://perldoc.perl.org/perlstyle.html

p. Verwende +kein+ CamelCase:

bc. my $someVariableThatContainsData =
    someSubroutineThatProcessDataAndReturnsItBack( $someAwfulVariable );

p. Verwende snake_case, denn das ist deutlich lesbarer:

bc. my $some_variable_that_contains_data =
    some_subroutine_that_process_data_and_returns_it_back( $some_awful_variable );

p. Verhindere unnötiges Zeichenrauschen. Schreib lesbar. Statt

bc. if(ref($data) eq "HASH")
{

p. schreib es so:

bc. if (ref $data eq "HASH") {

p. oder statt

bc. my %hash = ("foo" => 1, "bar" => 2, "baz" => 3);

p. geht es auch so:

bc. my %hash = (foo => 1, bar => 2, baz => 3);

p. Noch ein paar schlechte Beispiele:

bc.. foreach my $var (qw(a b c)) {

$var =~ s/\/\/a\/\//b/g;

my $var = join(",",$a,$b,@c,"and this");

open(FH,">$foo") or die $!;

p. So geht es lesbarer

bc.. foreach my $var (qw/a b c/) {

$var =~ s!//a//!b!g;

$var = join(",", $a, $b, @c, "and this");

open my $fh, ">", $foo or die $!;

p. Bitte lokalisiere Variablen mit __my__!

h2. Der Bloonix Code

p. Wenn Sie in den Code von Bloonix blicken, dann werden Sie sicherlich Codestellen finden, die nicht optimal sind. Wie das in vielen Softwareprojekten der Fall ist, gibt es oft Code, der schon lange existiert und gewachsen ist. Oder es gibt Funktionen/Methoden, die man __mal eben__ um ein paar Zeilen erweitert, ohne auf die Länge der Funktion/Methode zu achten.

p. Mit der Zeit werden auch diese Codestellen überarbeitet... es ist halt immer eine Frage der Zeit :-)


