p. _IN ENTWICKLUNG: Dieses HowTo ist noch nicht fertig_

h1. HowTo: Plugins entwickeln

p. Dieser Leitfaden richtet sich an Plugin-Entwickler und erklärt die Standards und die Funktionsweise von Bloonix Plugins.

p. Im Verlauf dieses HowTos wird das Plugin __check-http__ von Bloonix als Beispiel verwendet. Das Plugin können Sie sich im Github Repository von Bloonix anschauen: "Github: check-http":https://github.com/bloonix/bloonix-plugins-basic/blob/master/plugins/check-http

h2. Allgemeines

p. Bloonix Plugins sind eigenständige Skripts, die den Status eines oder mehrerer Services abfragen und zugleich statistische Daten zum Service liefern. Die Skripts können in jeder beliebigen Sprache geschrieben werden, wobei die Plugins, die von Bloonix entwickelt werden, in der Programmiersprache Perl entwickelt sind.

p. Jedes Plugin verfügt über diverse Optionen. Zum Beispiel kann das Plugin __check-http__ wie folgt über die Kommandozeile aufgerufen werden:

bc. check-http --url https://www.bloonix.de/ --warning 3 --critical 5 --timeout 10

p. Mit den Optionen __--url__, __--warning__, __--critical__ und __--timeout__ wird die Antwortzeit des Webservers für die Domain www.bloonix.de geprüft. Benötigt die Antwort gleich oder länger als 5 Sekunden, so wird ein kritischer Status zurückgegeben. Benötigt die Antwort gleich oder länger 3 Sekunden, so wird eine Warnung zurückgegeben. Nach 10 Sekunden wird die HTTP-Abfrage abgebrochen und ein kritischer Status zurückgegeben.

p. Insbesonders ist zu beachten, dass die Optionen eines Plugins, wie zum Beispiel __--url__, __--warning__ und __--critical__, in die Datenbank von Bloonix importiert werden müssen, damit einem Benutzer bei der Konfiguration eines Service-Checks die Optionen als Formularfelder zur Verfügung stehen. Wie das funktioniert, wird im weiteren Verlauf dieses HowTos eingegangen.

!{margin: 40px 0;}/public/img/service-settings-check-http.png!

h2. Statuscodes

p. Statuscodes spiegeln den Status eines Service wieder. Es gibt für Bloonix Plugins vier mögliche Statuscodes:

|_. Status String |_. Exitcode |_. Kurzbeschreibung |
| OK | 0 | Der Service ist verfügbar. Es gibt keinen Handlungsbedarf. |
| WARNING | 1 | Der Service ist verfügbar, es gibt Handlungsbedarf, aber nicht dringend. |
| CRITICAL | 2 | Der Service befindet sich in einem kritischen Status. Es gibt dringenden Handlungsbedarf. |
| UNKNOWN | 3 | Das Bloonix Plugin konnte nicht ausgeführt werden oder hat einen unerwarteten Fehler geliefert. |

p. Es gibt natürlich Raum für unterschiedliche Interpretationen eines Status, zu beachten ist jedoch, dass der Status __UNKNOWN__ einzig den Status des Plugins selbst beschreibt und nicht den Status eines Service. Das könnte zum Beispiel der Fall sein, wenn das Plugin __check-http__ nicht ausgeführt werden konnte, weil das Programm __curl__ nicht installiert ist oder weil die Parameterübergabe fehlerhaft war. Sobald alle Abhängigkeiten eines Plugins erfüllt sind, muss der Status __OK__, __WARNING__ oder __CRITICAL__ sein.

h2. Plugins ausführen

p. Die Plugins von Bloonix können für Testzwecke über die Kommandozeile aufgerufen werden. Beispiel:

bc. check-http --url https://www.bloonix.de/ --warning 3 --critical 5 --timeout 10

p. Der Bloonix Agent, welcher für die Ausführung der Plugins verantwortlich ist, übergibt die Optionen jedoch über __STDIN__ an das Plugin und im JSON-Format. Der Bloonix Agent verwendet die Option __--stdin__, um die Übergabe der Optionen über __STDIN__ einzuleiten. Die Ausgabe des Plugins erfolgt in einer einzigen Zeile und ebenfalls im JSON-Format. Um eine lesbare Ausgabe zu erhalten, sollte der Parameter __--pretty__ fürs Debugging implementiert werden.

p. Es folgt ein beispielhafter Aufruf des Plugins __check-http__:

bc. check-http --stdin --pretty
{"url":"https://www.bloonix.de","warning":3,"critical":5,"timeout":10}

p. Die Ausgabe sieht in etwa so aus:

bc. {
   "status" : "OK",
   "debug" : {
      "http-header" : {
         "Connection" : "keep-alive",
         "Server" : "nginx",
         "Content-Type" : "text/html; charset=utf-8",
         "Transfer-Encoding" : "chunked",
         "Date" : "Wed, 24 Dec 2014 13:36:51 GMT"
      },
      "ipaddr" : "127.0.0.1"
   },
   "stats" : {
      "time" : "16.433"
   },
   "message" : "HTTP/1.1 200 OK, response in 0.016433s, 10764 bytes, IP: 127.0.0.1"
}

h2. Namensformat von Plugins

p. Die Namen der Plugins bestehen aus zwei Teilen. Der erste Teil ist der Prefix __check__. Der zweite Teil ist ein sinnvoller Name, welchen Service das Plugin prüft. Alle Teile werden mit einem Minuszeichen verbunden. Wenn zum Beispiel die CPU geprüft werden soll, so sollte das Plugin __check-cpu__ lauten.

h2. Eingabe, Optionen

p. Die Optionen eines Plugins werden dazu verwendet, um dem Plugin bestimmte Anweisungen zur Ausführung zu geben. Zum Beispiel kann über den Parameter __--help__ eine Hilfe zu einem Plugin abgerufen werden. Eine Kurzversion der Optionen, zum Beispiel __-h__ für die Hilfe, gibt es nicht. Alle Optionen gibt es nur im langen Format.

p. Jedes Bloonix Plugin muss über mindestens 5 Optionen verfügen. Diese sind wie folgt:

|_. Parameter |_. Beschreibung |
| --version | Ausgabe der Version des Plugins. |
| --help | Ausgabe einer Hilfe zum Plugin mit Auflistung der Optionen. |
| --plugin-info | Ausführliche Informationen über das Plugin im JSON-Format. |
| --stdin | Anweisung an das Plugin, die Optionen zur Ausführung über den STDIN-Kanal zu lesen. |
| --pretty | Anweisung an das Plugin, den JSON-String in einem leserlichen Format auszugeben. |

h2. Ausgabe

h3. Option: version

p. Die Ausgabe der Plugin-Version ist einheitlich und im Format __check-script v$version__.

bc. check-http --version
check-http v0.1

h3. Option: help

p. Die Option __help__ gibt die Hilfe eines Plugins aus und zwar so, wie es bei Programmen üblich ist:

bc.. check-http --help

Usage: check-http [ OPTIONS ]

Options:

--url <url>
    This is the HTTP or HTTPS request you want to check. Please enter the full URL with the query string.
    This option is mandatory.
--warning <seconds>
    A value in seconds. When the check takes longer than this time then a warning status is triggered.
    Default: 3
--critical <seconds>
    A value in seconds. When the check takes longer than this time then a critical status is triggered.
    Default: 5
--timeout <seconds>
    A timeout in seconds after its expiration the check is aborted and a critical status is triggered.
    Default: 10
--version
    Print the version.
--help
    Print the help.
--plugin-info
    Print plugin information as JSON string.
--pretty
    Print the plugin information in pretty format
...
...

h3. Option: plugin-info

p. Die Option __plugin-info__ ist ähnlich zur Option __help__ und gibt die Informationen einen Plugins im JSON-Format aus, so dass diese Daten in die Datenbank von Bloonix importiert werden können. Dabei werden erweiterte Informationen zum Plugin ausgegeben.

bc. check-http --plugin-info --help
{
   "plugin" : "check-http",
   "version" : "0.13",
   "flags" : "",
   "options" : [
      {
         "option" : "url",
         "name" : "URL",
         "default" : null,
         "description" : "This is the HTTP or HTTPS request you want to check. Please enter the full URL with the query string.",
         "value_type" : "string",
         "value_desc" : "url",
         "mandatory" : 1,
         "multiple" : 0,
         "example" : "https://www.bloonix.de/"
      },
      {
         "option" : "warning",
         "name" : "Warning threshold",
         "default" : 3,
         "description" : "A value in seconds. When the check takes longer than this time then a warning status is triggered.",
         "value_type" : "number",
         "value_desc" : "seconds"
         "mandatory" : 0,
         "multiple" : 0
      },
      {
         "option" : "critical",
         "name" : "Critical threshold",
         "default" : 5,
         "description" : "A value in seconds. When the check takes longer than this time then a critical status is triggered.",
         "value_type" : "number",
         "value_desc" : "seconds",
         "mandatory" : 0,
         "multiple" : 0
      },
      {
         "option" : "timeout",
         "name" : "Timeout",
         "default" : 10,
         "description" : "A timeout in seconds after its expiration the check is aborted and a critical status is triggered.",
         "value_type" : "number",
         "value_desc" : "seconds",
         "mandatory" : 0,
         "multiple" : 0
      },
      {
         "option" : "verbose-status",
         "name" : "Verbose status",
         "default" : null,
         "description" : "Add the http header and content to status output.",
         "value_type" : 0,
         "mandatory" : 0,
         "multiple" : 0
      }
   ],
   "examples" : [
      {
         "description" : [
            "The following set of options would send a HTTP request and check the response time of the webserver."
         ],
         "arguments" : [
            "url", "https://www.bloonix.de/",
            "warning", 3,
            "critical", 5
         ]
      }
   ]
}

h4. Allgemeine Parameter

bc. {
   "plugin" : "check-http",
   "version" : "0.13",
   "flags" : "",
   "options" : [ ],
   "examples" : [ ]
}

|_. Parameter |_. Beschreibung |
| plugin | Der Names des Plugins. Dieser muss den Prefix __check-__ haben. |
| version | Die Version des Plugins. Das Format der Ausgabe ist __check-name v$version__ |
| flags | Hier können Flags mitgegeben werden. Zum Beispiel __sudo__, falls das Plugin __sudo__ benötigt, um ausgeführt zu werden. |
| options | Die Optionen des Plugins. |
| examples | Ein Beispiel, die das Plugin mit Optionen aufgerufen wird. |

h4. Flags

bc. "flags" : "sudo,this,that"

p. Mit den Flags können für Plugins bestimmte Merkmale vergeben werden. Derzeit ist nur ein einzigen Flag verfügbar und zwar das Flag __sudo__. Wenn dieses Flag gesetzt ist, dann wird in der WebGUI bei der Einrichtung eines Services ein besonderer Hinweis angezeigt. Für das Plugins __check-smart-health__ sieht die Information wie folgt aus:

!{margin: 20px 0;}/public/img/plugin-info-sudo.png!

h4. Optionen

bc. "options" : [
   {
      "option" : "warning",
      "name" : "Warning threshold",
      "default" : 3,
      "description" : "A value in seconds. When the check takes longer than this time then a warning status is triggered.",
      "value_type" : "number",
      "value_desc" : "seconds"
      "mandatory" : 0,
      "multiple" : 0
   }
]

|_. Parameter |_. Beschreibung |
| option | Das ist der Name der Option, zum Beispiel __warning__ für __--warning__. |
| name | Das ist der sprechende Name der Option. |
| default | Der Standardwert, welcher im Formular vorbelegt sein soll. |
| description | Eine kurze Beschreibung der Option. Die Beschreibung mit über den Info-Button eingeblendet. |
| value_type | Welchen Typ hat der Wert. Möglich ist __int__ für eine Zahl, __number_ für eine Zahl größer Null, __array__ für ein Array und __hash__ für ein assoziatives Array. |
| value_desc | Eine sehr kurze Beschreibung des Wertes, zum Beispiel __seconds__ für Sekunden. |
| mandatory | Wenn diese Option unbedingt gesetzt werden muss, dann sollte __mandatory__ auf 1 gesetzt werden, ansonsten 0. |
| multiple | Kann diese Option mehrfach gesetzt werden? Zum Beispiel: __--device sda --device sdb --device sdc__ |
| example | Der Wert von __example__ wird als Platzhalter in einem Forumlarfeld angezeigt. |

h4. Beispiele

bc. "examples" : [
   {
      "description" : [
         "The following set of options would send a HTTP request and check the response time of the webserver."
      ],
      "arguments" : [
         "url", "https://www.bloonix.de/",
         "warning", 3,
         "critical", 5
      ]
   }
]

p. Die Beispiele werden in der WebGUI bei der Einrichtung eines Service-Checks angezeigt:

!{margin: 20px 0;}/public/img/plugin-info-option-examples.png!

h2. Informationen eines Plugins in die Bloonix Datenbank importieren

p. In Bearbeitung.

h2. Ein Plugin Step für Step entwickeln

p. In Bearbeitung.

