p. _IN ENTWICKLUNG: Dieses HowTo ist noch nicht fertig_

h1. HowTo: Plugins entwickeln

p. Dieser Leitfaden richtet sich an Plugin-Entwickler und erklärt die Standards und die Funktionsweise von Bloonix Plugins.

h2. Allgemeines

h3. Programmiersprache Perl

p. Bloonix Plugins sollten in der Programmiersprache Perl entwickelt werden, da es für Perl ein Modul names __Bloonix::Plugin__ gibt, was die Entwicklung von Plugins deutlich vereinfacht und beschleunigt. Derzeit ist es nicht geplant, ein gleichwertiges Modul für andere Sprachen zu entwickeln.

h3. Dateien eines Plugins

p. Ein Plugin von Bloonix besteht aus zwei Dateien. Zum Beispiel besteht der HTTP Check von Bloonix aus den Dateien

* check-http - das Skript, welches ausgeführt wird
* plugin-http - Metadaten zum Plugin sowie die Konfiguration der Charts

p. Beide Dateien werden später benötigt, um die Metadaten eines Plugins in die Datenbank der WebGUI von Bloonix zu importiern, damit das Plugin in der WebGUI als Service eingerichtet werden kann.

h2. Plugins entwickeln

p. In diesem Kapitel wird beispielhaft ein Plugin namens __Test.Check__ entwickelt. Das Plugin enthält die Dateien __check-test__ und __plugin-test__.

h3. Entwicklung: check-test

<pre>
<code>#!/usr/bin/perl

# Immer 'warnings' und 'strict' inkludieren.
use warnings;
use strict;

# Das Modul Bloonix::Plugin einbinden.
use Bloonix::Plugin;

# Ein neues Objekt von Bloonix::Plugin erzeugen und gleichzeitig
# die Versionsnummer des Plugins setzen.
my $plugin = Bloonix::Plugin->new(version => "0.1");

# Es sollte immer ein Beispiel angegeben werden, wie das Plugins
# ausgeführt werden kann. Ruft man die Hilfe auf, so wird das
# Beispiel etwa so aussehen:
#   check-test --url https://www.bloonix.de/ --warning 3 --critial 5
$plugin->example(
    description => "Check the URL",
    arguments => [
        url => "https://www.bloonix.de/",
        warning => 3,
        critical => 5
    ]
);

# Mit der Methode add_option() wird eine Kommandozeilenoption
# definiert, in diesem Fall ist es die Option --url.
$plugin->add_option(
    # Ein sprechender Name der Option. Der Name wird in der WebGUI
    # im Formular zur Konfiguration von Services angezeigt.
    name => "URL to check",

    # Die Option, wie sie mit -- aufgerufen wird.
    option => "url",

    # Der Typ des Werts. Mögliche Angaben sind string, int, number.
    # string ist eine Zeichenkette. int ist eine Zahl von 0-n.
    # Number ist eine Zahl von 1-n.
    value_type => "string",

    # Eine sehr kurze Beschreibung des Wertes. Die Beschreibung
    # wird in der Hilfe angezeigt. Beispiel: --url <url to check>
    value_desc => "url to check",

    # Ist dies eine Pflichtoption? 1 für ja, 0 für nein.
    mandatory => 1,

    # Kann die Option mehrfach angegeben werden? 1 für ja, 0 für nein.
    multiple => 0,

    # Es kann mittels Regexp geprüft werden, ob der übergebene Wert
    # korrekt ist. Hier wird beispielhaft geprüft, ob die URL vereinfacht
    # einem bestimmten Format entspricht:
    regex => qr!^https{0,1}://[^\s]+!,

    # Eine Beschreibung der Option.
    description => "Check the response time of a URL."
);

$plugin->add_option(
    name => "Warning threshold",
    option => "warning",
    value_type => "number",
    value_desc => "seconds",
    mandatory => 0,
    multiple => 0,
    description => "Trigger a WARNING status if the request takes longer."
);

$plugin->add_option(
    name => "Crtitical threshold",
    option => "critical",
    value_type => "number",
    value_desc => "seconds",
    mandatory => 0,
    multiple => 0,
    description => "Trigger a CRITICAL status if the request takes longer."
);

# Die Argumente werden geprüft und validiert. Das Objekt $opt ist eine
# Hash-Referenz und enthält alle Argumente und Werte im Key-Value Format.
my $opt = $plugin->parse_options;

# Bloonix::Plugin stellt die Methode runtime() zur Verfügung, um den Zeitabstand
# zwischen zwei Aufrufen zu messen. Beim erstmaligen Aufruf wird die Startzeit
# gespeichert.
$plugin->runtime;

# Nun prüfen wir vereinfacht, ob der Aufruf der URL erfolgreich war.
my @output = qx{curl '$opt->{url}' --retry 0 --silent --show-error --include 2>&1};

# Dieses Mal gibt runtime() die Zeit zurück, die seit dem ersten Aufruf
# vergangen ist.
my $time = $plugin->runtime;

if ($output[0] !~ m!^HTTP/1.1 200 OK!) {
    $plugin->exit(
        status => "CRITICAL",
        message => "the request wasn't successful: $output[0]",
        stats => {
            time => $time
        }
    );
}

my $status = "OK";

# Zu guter Letzt prüfen wir die Antwortzeiten.
if ($opt->{critical} && $time >= $opt->{critical}) {
    $status = "CRITICAL";
} elsif ($opt->{warning} && $time >= $opt->{warning}) {
    $status = "WARNING";
}

$plugin->exit(
    status => $status,
    message => "response time ${time}s",
    stats => {
        time => $time
    }
);
</code>
</pre>

p. Es folgen ein paar Beispiele zur Ausführung des Skripts:

bc.. # perl check-test --version
check-test v0.1

bc.. # perl check-test --help

Usage: check-test [ OPTIONS ]

Options:

--url<url to check>
    Check the response time of a URL.
    This option is mandatory.
--warning<seconds>
    Trigger a WARNING status if the request takes longer.
--critical<seconds>
    Trigger a CRITICAL status if the request takes longer.
--version
    Print the version.
--help
    Print the help.
--plugin-info
    Print plugin information as JSON string.
--pretty
    Print the plugin information in pretty format

Examples:

  * Check the URL

      check-test --url 'https://www.bloonix.de/' --warning '3' --critical '5'

Command line options as JSON string

  * It's possible to pass the command line options as a JSON string:

    check-test '{"option":"value","multiple":["value1","value"]}'

  * It's also possible to pass the JSON string to STDIN of the plugin:

    check-test --stdin <<EOT
    {"option":"value","multiple":["value1","value"]}
    EOT

bc.. # perl check-test --plugin-info --pretty
{
   "plugin" : "check-test",
   "version" : "0.1",
   "flags" : "",
   "options" : [
      {
         "name" : "URL to check",
         "default" : null,
         "description" : "Check the response time of a URL.",
         "value_type" : "string",
         "option" : "url",
         "mandatory" : 1,
         "multiple" : 0,
         "value_desc" : "url to check"
      },
      {
         "name" : "Warning threshold",
         "default" : null,
         "description" : "Trigger a WARNING status if the request takes longer.",
         "value_type" : "number",
         "option" : "warning",
         "mandatory" : 0,
         "multiple" : 0,
         "value_desc" : "seconds"
      },
      {
         "name" : "Crtitical threshold",
         "default" : null,
         "description" : "Trigger a CRITICAL status if the request takes longer.",
         "value_type" : "number",
         "option" : "critical",
         "mandatory" : 0,
         "multiple" : 0,
         "value_desc" : "seconds"
      }
   ],
   "examples" : [
      {
         "command_line" : "check-test --url 'https://www.bloonix.de/' --warning '3' --critical '5'",
         "arguments" : [
            "url",
            "https://www.bloonix.de/",
            "warning",
            3,
            "critical",
            5
         ],
         "description" : [
            "Check the URL"
         ]
      }
   ]
}

bc.. # perl check-test --url https://www.bloonix.de/ --warning 3 --critical 5
{"status":"OK","stats":{"time":"0.016"},"message":"response time 0.016s"}

h3. Entwicklung: plugin-test

p. Entsprechend zum Skript wird die Datei __plugin-test__ mit Metainformationen zum Plugin benötigt.

bc.. plugin {
    id 100001
    plugin Test.Check
    command check-test
    datatype statistics
    category Test,HTTP,Network
    netaccess yes
    prefer remote
    abstract TEST check
    description Just a simple test script.
}

statistic {
    statkey time
    alias Response time
    datatype float
    units ms
    description Time in milliseconds waiting for response.
}

chart {
    id 1
    title HTTP request - response time
    options {
        ylabel time in ms
        chart-type area
        series {
            name time
            color \#005467
        }
    }
}

p. Beschreibung __plugin__:

|_. Parameter |_. Beschreibung |
| id | Eine eindeutige ID für das Plugin. Die ID darf sich nicht ändern und auch nicht für andere Plugins verwendet werden. Zu beachten ist, dass die IDs unter 100.000 für Bloonix selbst reserviert sind. Sollten Sie ein Plugin nur für eigene Zwecke entwickeln, so sollte eine ID ab 100.000 gewählt werden. |
| plugin | Der Name des Plugins, welcher in der WebGUI angezeigt wird. |
| command | Der Name des Skripts. |
| datatype | Wenn das Plugin Statistiken ausgibt, sollte hier __statistics__ angegeben werden, ansonsten __none__. |
| category | Hier werden die Kategorien des Plugins angegeben. In der WebGUI kann nach Kategorien gefiiltern werden. |
| netaccess | Hier wird angegeben, ob der Service, welcher geprüft wird, über eine Netzwerkverbindung geprüft werden kann. Mögliche Werte sind __yes__ und __no__. |
| prefer | Hier wird die bevorzugte Agent-Lokation angegeben, welche in der WebGUI standardmäßig ausgewählt ist. Mögliche Werte sind __localhost__, __intranet__ und __remote__. |
| abstract | Eine Kurzbeschreibung, welche in der WebGUI im Feld __Beschreibung__ standardmäßig gesetzt wird. |
| description | Eine Beschreibung des Plugins. |

p. Beschreibung __statistic__:

|_. Parameter |_. Standardwert |_. Beschreibung |
| statkey | Der Schlüsselname der Statistik. |
| alias | Ein Alias, welcher in den Charts statt des Schlüssels verwendet wird. |
| datatype | Der Datentyp ist wichtig, denn die Statistiken werden validiert, bevor diese in der Datenbank gespeichert werden. Mögliche Werte sind smallint, integer, bigint, float und varchar(ZAHL). |
| units | Hier wird angegeben, welche Einheit der statistische Wert hat. Gibt es keine Einheit, so kann der Parameter ausgelassen werden. Mögliche Werte sind: kilo, mega, giga, tera, peta, exa, zetta, yotta, bytes, kilobytes, megabytes, gigabytes, terabytes, petabytes, exabytes, zettabytes, yottabytes, bits, kilobits, megabits, gigabits, terabits, petabits, exabits, zettabits, yottabits, ms, percent, temperature, unixtime |
| description | Eine Beschreibung des statistischen Wertes. |

p. Beschreibung __chart__:

|_. Parameter |_. Beschreibung |
| id | Eine eindeutige ID für den Chart. Diese ID darf innerhalb des Plugins nur einmal verwendet werden. Bitte beachten Sie, dass Benutzer in der WebGUI Chart-Views erstellen können. Zu diesen Chart-Views werden die Chart-IDs gespeichert. Eine Chart ID zu ändern bedeuted also, dass der Chart dann nicht mehr existiert. Eine Chart-ID zu ändern bedeuted, dass ein Benutzer eventuell etwas anderes angezeigt bekommt. |
| title | Der Titel des Charts. |
| options | Hier werden die Optionen für den Chart selber konfiguriert. |

p. Beschreibung __chart -> options__:

|_. Parameter |_. Beschreibung |
| ylabel | Der Text auf der Y-Achse des Charts. |
| chart-type | Mögliche Werte sind __line__ und __area__. |
| units | Hier wird die Grundlegende Einheit angegeben. Mögliche Werte sind __bits__, __bytes__ und __null__. Die Einheit wird für die Umrechnung verwendet auf der Y-Achse verwendet. Sollte eine Umrechnung nicht erwünscht sein, so sollte hier __null__ angegeben werden, was zum Beispiel für Prozentwerte sinnvoll ist. |
| series | Unterhalb von Series gibt es nur zwei Parameter und zwar __name__ und __color__. Geben Sie hier an, welche Statistik angezeigt werden soll und auch die gewünschte Farbe. |

